# -*- coding: utf-8 -*-
"""Road Safety app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RwdOYUg0ThdelRPq1rR3H9qX83x9p7oG
"""

# 1. Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# 2. Load Data
df = pd.read_csv("RTA Dataset.csv")
df.drop_duplicates(inplace=True)
df.fillna("Unknown", inplace=True)
df.head()

# 5. Exploratory Data Analysis (EDA)
plt.figure(figsize=(10, 5))
sns.countplot(data=df, x='Day_of_week', order=df['Day_of_week'].value_counts().index)
plt.title('Accidents per Day of Week')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='Accident_severity', order=df['Accident_severity'].value_counts().index)
plt.title('Accident Severity Distribution')
plt.show()

plt.figure(figsize=(10, 5))
sns.heatmap(df.select_dtypes(include=np.number).corr(), annot=True, cmap="coolwarm")
plt.title('Correlation Heatmap')
plt.show()

# 3. Feature Engineering BEFORE Encoding
df['Time_hour'] = pd.to_datetime(df['Time'], errors='coerce').dt.hour.fillna(0).astype(int)
df['Time_of_day'] = pd.cut(df['Time_hour'],
                           bins=[0, 6, 12, 18, 24],
                           labels=['Night', 'Morning', 'Afternoon', 'Evening'],
                           include_lowest=True).astype(str)

# 4. Target Variable
df['Severity_binary'] = df['Accident_severity'].apply(lambda x: 1 if x == 'Fatal injury' else 0)

# 5. Label Encode ALL Object Columns
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object' or df[col].dtype.name == 'category':
        df[col] = le.fit_transform(df[col].astype(str))

# 6. Feature/Target Split
X = df.drop(columns=['Accident_severity', 'Severity_binary', 'Time', 'Time_hour'], errors='ignore')
y = df['Severity_binary']

# 7. Scale Numeric Columns
scaler = StandardScaler()
num_cols = ['Number_of_vehicles_involved', 'Number_of_casualties']
X[num_cols] = scaler.fit_transform(X[num_cols])

# 8. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 9. Model Training (This will now work!)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# 10. Model Evaluation
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))